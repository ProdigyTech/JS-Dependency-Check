#!/usr/bin/env node
import"command-line-args";import e from"path";import{promises as n}from"fs";import t from"app-root-path";import o from"axios";import r from"semver/functions/gte.js";import a from"semver/functions/diff.js";import s from"cli-table";const d=async({path:e})=>{try{return n.readFile(e)}catch(n){console.error(`Error reading file ${e}`),console.error(n),process.exit(1)}},i=(e={})=>Object.keys(e).map((n=>({package:n,version:e[n]}))),c=t.path,p="https://registry.npmjs.org",l=async(e,n)=>{try{const t=((e,n)=>n.filter((n=>!e.includes(n.package))))(n,e);return(await Promise.all(t.map((async e=>{const n=await u({package:e.package});return await h(n,e)})))).reduce(((e,n)=>(n.package.error?e.failedLookups.push(n):e.successfulLookups.push(n),e)),{successfulLookups:[],failedLookups:[]})}catch(e){console.error(e),process.exit(1)}},u=async({package:e})=>{const n=`${p}/${e}`;try{const{data:e}=await o.get(n),{time:t}=e;return{versionTimeline:t,tags:e["dist-tags"]}}catch(t){return console.error(`There was an issue searching the registry for ${e}, skipping...`),{error:!0,name:e,url:n,stackTrace:t}}},g=({name:e,versionTimeline:n,latest:t,definedVersion:o,error:r=!1,currentPackage:s,stackTrace:d})=>r?{package:{error:r,name:s.package,version:s.version,stackTrace:d}}:{package:{name:e,registry_url:`${p}/${e}`,npm_url:`https://www.npmjs.com/package/${e}`,latest:{version:t||o,releaseDate:n[t]||n[o]},current:{version:o,releaseDate:n[o]},upgradeType:`${a(o,t||o)||"N/A"}`.toUpperCase(),error:r}},h=async({versionTimeline:e,tags:n,error:t=!1,stackTrace:o},a)=>new Promise(((s,d)=>{try{if(t)return s(g({error:t,currentPackage:a,stackTrace:o}));const d=(e=>{if(Number.isNaN(Number.parseFloat(e.version))){const n=e.version.split(""),[,...t]=n;return t.join("")}return e.version})(a),{latest:i}=n;let c={};c=r(d,i)?g({name:a.package,versionTimeline:e,definedVersion:d}):g({name:a.package,versionTimeline:e,latest:i,definedVersion:d}),s(c)}catch(e){console.warn(e),d(e)}})),k={JSON:"JSON",HTML:"HTML",CI:"CI"},f="Dev Dependencies",y="Peer Dependencies",m="Dependencies",v="MAJOR",R="MINOR",b="PREMAJOR",D="PREMINOR",w="PREPATCH",T="PRERELEASE",$="PATCH",L="MINOR",P="NONE",C="Failed Lookups",O="UP TO DATE",N="OUTDATED",j="UNKNOWN",E=(e,n)=>{if(e.length){const t=new s({head:n===C?[n,"Project Version","Error Info"]:[n,"Project Version","Latest Version","Upgrade Type"],colWidths:n===C?[25,25,25]:[25,25,25,25],colors:!0});return e.forEach((({package:e})=>{const{name:n,current:o,latest:r,upgradeType:a,error:s}=e;s?t.push([n,e.version,e.stackTrace]):t.push([n,o.version,r.version,a.toUpperCase()])})),t}return""},S=e.resolve(t.path),x={[v]:e=>"N/A"!=e.upgradeType,[$]:e=>e.upgradeType===$,[R]:e=>e.upgradeType===R||e===$,[b]:e=>e.upgradeType.includes("PRE"),[D]:e=>e.upgradeType===D||e===w,[w]:e=>e.upgradeType===w,[T]:e=>e.upgradeType===T,[P]:()=>!1},A=({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t})=>[...e,...n,...t].reduce(((e,{package:n})=>{const{upgradeType:t}=n;return e[t]?{...e,[t]:e[t]+1}:{...e,[t]:1}}),{}),M=(e,n=R)=>new Promise(((t,o)=>{try{const{devDependencies:o,peerDependencies:r,dependencies:a}=e.packages;let s=[];s=((e,n)=>{let t=[];return x[n]?t=e.filter((({package:e})=>x[n](e))):(console.log(`Unknown failOnKey: ${n} passed in package.json, using default ${L}`),t=e.filter((({package:e})=>x[L](e)))),t})([...o,...r,...a],n),s.length>0?t({exitCode:1,failedPackages:s}):(console.log("Dependencies are up to date."),t({exitCode:0,failedPackages:[]}))}catch(e){console.log(e),o({exitCode:1,failedPackages:[]})}})),I=async({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:o,disableTime:r=!1},{name:a,version:d},{failOn:i})=>{try{const p=new Date,l={repoInfo:{name:a,version:d},packages:{devDependencies:n,peerDependencies:e,dependencies:t,failedLookups:o},stats:A({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t}),reportGeneratedAt:{date:!r&&p.toLocaleDateString(),time:!r&&p.toLocaleTimeString()}},{exitCode:u,failedPackages:g}=await M(l,i);return await(c=l,new Promise(((e,n)=>{try{const{devDependencies:n,peerDependencies:t,dependencies:o,failedLookups:r}=c.packages,a=E(n,f),s=E(t,y),d=E(o,m),i=E(r,C);console.log(a.toString()),console.log(s.toString()),console.log(d.toString()),console.log(i.toString()),e()}catch(e){console.error(e),n(e),process.exit(1)}}))),g.length>0&&await(e=>new Promise(((n,t)=>{try{const t=new s({head:["Packages Requiring Attention","Project Version","Latest Version","Upgrade Type"],colWidths:[25,25,25,25],colors:!0});e.forEach((({package:e})=>{const{name:n,current:o,latest:r,upgradeType:a}=e;t.push([n,o.version,r.version,a.toUpperCase()])})),console.log(t.toString()),n()}catch(e){t(e)}})))(g),u>0&&console.log("Out of date dependencies detected. Please upgrade or ignore out of date dependencies. \n Review the Packages Requiring Attention section for more info"),{exitCode:u}}catch(e){console.error(e)}var c},U=({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:o},{name:r,version:a})=>{const{template:s,outdated_counter:d}=_(t,"Dependencies"),{template:i,outdated_counter:c}=_(n,"Dev Dependencies"),{template:p,outdated_counter:l}=_(e,"Peer Dependencies"),{errorTable:u}=V(o),g=J(),h=W({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:o});return`\n        <html>\n        <title> Dependency Check -- Report </title>\n        <head>\n        </head>\n        <style>\n        {\n        font-family: Arial, Helvetica, sans-serif;\n        border-collapse: collapse;\n        width: 100%;\n        }\n\n        div.wrapper{\n        display: flex;\n        flex-direction: column;\n        flex-wrap: wrap;\n        width:100%;\n        }\n\n        .header, .sub-header{\n          flex-direction: row;\n          width:90%;\n        }\n        \n        .legend-table {\n          flex-direction: row;\n          width: 50%;\n          margin-right: 3em;\n        }\n        \n        .dep-table, .dev-table, .peer-table, .error-table {\n             width: 80%;\n             flex-direction: row;\n             min-width: 60%;\n        }\n        .status {\n          min-width: 5em;\n        }\n\n         td, th {\n        border: 1px solid #ddd;\n        padding: 8px;\n        }\n        tr {\n            cursor: pointer;\n        }\n        tr:nth-child(even){background-color: #f2f2f2;}\n\n        tr:hover {background-color: #ddd;}\n\n        #th {\n        padding-top: 12px;\n        padding-bottom: 12px;\n        text-align: left;\n        background-color: #04AA6D;\n        color: white;\n        }\n        </style>\n    \n        <body>\n        <div class="wrapper">\n        <div class=header>\n        <h2>Dependency Check Results for ${r} v${a} </h2>\n        </div>\n        <div class="sub-header">\n          <h3>${(()=>{const e=c+l+d;return 0==e?`üéâ There are ${e} packages that need to be updated. Woohoo! `:1==e?`‚ö†Ô∏è There is ${e} package that needs to be updated - Not bad! `:e>1&&e<10?`‚ö†Ô∏è There are  ${e} packages that need to be updated`:e>=10?`‚Äã‚Äã‚ö†Ô∏è‚Äãüò±‚Äã Ouch... There are ${e} packages that need to be updated üôà Good Luck! `:void 0})()} </h3>\n        </div>\n        \n        <div class="legend-table"> \n          ${g}\n        </div>\n        <div class="stats-table">\n          ${h}\n        </div>\n        <div class="dep-table">\n                ${s}\n        </div>\n        <div class="dev-table">\n                ${i}\n        </div>\n        <div class="peer-table">\n                ${p}\n        </div>\n        <div class="error-table">\n            ${u}\n        </div>\n        </div>\n        </body>\n        </html>\n    `},H=[{key:[O,"N/A"],color:"background-color:green",meaning:"Up to date, no action needed."},{key:["PATCH"],color:"background-color:yellowgreen",meaning:"Patch upgrade, no breaking changes"},{key:["PREPATCH","PREMINOR","MINOR"],color:"background-color:yellow",meaning:"Minor upgrade, possible breaking changes. \n Consult the change log"},{key:["PRERELEASE","MAJOR","PREMAJOR"],color:"background-color:red",meaning:"Major upgrade with breaking changes. \n Consult the change log"}],V=(e=[])=>({errorTable:e.length?`\n                    <h2>Failed Lookups </h2>\n                    <h4>We couldn't locate the packages below in the public npm registry </h4>\n                <table id="result-table-error style="width:100%">\n                    <thead>\n                        <tr>\n                        <td>Package</td>\n                        <td>Current Version</td>\n                        <td>Status</td>\n                        <td>Response Code</td>\n                    </thead>\n                    <tbody>\n                       ${e.map((({package:e})=>`<tr>\n                           <td>${e.name}</td>\n                           <td>${e.version}</td>\n                           <td>${j}</td>\n                           <td>${e.stackTrace.toString()}</td>\n                           </tr>`)).join("")}\n                    </tbody>\n                    </table>`:""}),J=()=>`    \n                    <h4>Legend </h4>\n                <table id="legend">\n                    <thead>\n                        <tr>\n                        <td>Color</td>\n                        <td>Meaning</td>\n                        <td>Upgrade Type</td>\n                    </thead>\n                    <tbody>\n                       ${H.map((({color:e,meaning:n,key:t})=>`<tr>\n                           <td style="${e}"></td>\n                           <td>${n}</td>\n                           <td>${t.join(" ")}</td>\n                           </tr>`)).join("")}\n                    </tbody>\n                    </table>`,_=(e,n)=>{const t=e=>{return(n=e,H.find((({key:e})=>e.includes(n)))).color;var n};let o=0;return{template:e.length?`\n                    <h2>${n}</h2>\n                <table id="result-table-${n} style="width:100%">\n                    <thead>\n                        <tr>\n                        <td>Package</td>\n                        <td>Current Version</td>\n                        <td>Current Release Date</td>\n                        <td>Latest Version</td>\n                        <td>Latest Version Release Date</td>\n                        <td>Status</td>\n                        <td> Upgrade Type </td>\n                        <td> Link to package in registry </td>\n                        <td> Link to package on NPM </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                       ${e.map((({package:e})=>{const{name:n,registry_url:a,npm_url:s,latest:d,current:i,upgradeType:c}=e,p=((e,n)=>"ERROR"===e||"ERROR"===n?j:r(n,e)?O:N)(d.version,i.version);p===N&&o++;const l=new Date(i.releaseDate).toLocaleDateString(),u=new Date(d.releaseDate).toLocaleDateString();return`<tr>\n                        <td>${n}</td>\n                        <td> ${i.version} </td>\n                        <td>${l}</td>\n                        <td>${d.version} </td>\n                         <td>${u}</td>\n                        <td class="status" style=${t(c.toUpperCase())}>${p}</td>\n                        <td> ${c.toUpperCase()} </td>\n                        <td> <a href=${a} target="_blank"> ${a} </a> </td>\n                        <td> <a href=${s} target="_blank"> ${s} </a> </td>\n                        </tr>`})).join("")}\n                    </tbody>\n                    </table>`:"",outdated_counter:o}},W=({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t})=>{const o=A({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t}),r=Object.keys(o).filter((e=>"N/A"!==e));return r.length?`    \n                    <h4>Stats </h4>\n                <table id="stats">\n                    <thead>\n                        <tr>\n                        <td>Upgrade Type</td>\n                        <td>Package Count</td>\n                    </thead>\n                    <tbody>\n                    ${r.map((e=>`\n                      <tr>\n                      <td>${e.toUpperCase()}</td>\n                      <td>${o[e]}</td>\n                      </tr>\n                      `)).join("")}\n                    </tbody>\n                    </table>`:""},F=async(t,o)=>{try{const r=e.join(S,`dependency-status-report.${o.toLowerCase()}`);await n.writeFile(r,t),console.log(`Wrote report to ${r}`)}catch(e){console.error(e)}};let G=!1;const q=e=>{const n=K.find((e=>e.includes("--report-type=")));if(n){const e=n.split("=");G=!0;const t=Object.keys(k).find((n=>n==e[1].toUpperCase()));return t||(console.log(`You've supplied an invalid report type, Valid types are CI, JSON, HTML... You supplied ${e[1]} \n defaulting to HTML`),k.HTML)}return e?.reportType&&Object.keys(k).find((n=>n==e.reportType.toUpperCase()))||k.HTML},K=process.argv.slice(2),Y=async n=>{try{const t=await(async()=>{const n=e.join(c,"package.json"),t=JSON.parse(await d({path:n}));return{repoInfo:{name:t.name||"",version:t.version||"",type:t.type||""},dependencies:i(t.dependencies)||[],peerDependencies:i(t.peerDependencies)||[],devDependencies:i(t.devDependencies)||[],config:t.dependencyCheckConfig}})();let o;const{peerDependencies:r,dependencies:a,devDependencies:s,repoInfo:p,config:u}=t;o=u||await(async()=>{try{const n=e.join(c,"dependencyCheckConfig.json");return JSON.parse(await d({path:n}))}catch(e){console.error("error reading config file"),console.log(e),process.exit(1)}})(t.repoInfo.type);const g=n||q(o);((e,n,t)=>{e?(e.reportType&&n&&t&&(console.log("Looks like you've supplied a reportType config option and a reportType CLI arg. Ignoring the config option from Package.json"),console.log("Report Type: ",n)),e.failOn&&n!==k.CI&&console.log("Looks like you've added a failOn config option. This only works when the report type is CI. Ignoring..."),e.ignorePackages&&console.log(`Ignoring the following packages... ${e.ignorePackages.join(" ")}`)):console.log("Couldn't find config options in your package.json, using default options")})(o,g,G);const h=await(async({peerDependencies:e=[],devDependencies:n=[],dependencies:t=[],config:o={}})=>{const r=[],a=o.ignorePackages||[],{successfulLookups:s,failedLookups:d}=await l(e,a),{successfulLookups:i,failedLookups:c}=await l(n,a),{successfulLookups:p,failedLookups:u}=await l(t,a);return r.push(...u,...c,...d),{peerDependenciesResult:s,devDependenciesResult:i,dependenciesResult:p,failedLookupResult:r}})({peerDependencies:r,dependencies:a,devDependencies:s,config:o});switch(g){case k.HTML:const e=U(h,p);await F(e,k.HTML);break;case k.JSON:const n=(({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:o,disableTime:r=!1},{name:a,version:s})=>{const d=new Date;return JSON.stringify({repoInfo:{name:a,version:s},packages:{devDependencies:n,peerDependencies:e,dependencies:t,failedLookups:o},stats:A({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t}),reportGeneratedAt:{date:!r&&d.toLocaleDateString(),time:!r&&d.toLocaleTimeString()}},null,2)})(h,p);await F(n,k.JSON);break;case k.CI:const t=await I(h,p,o),{exitCode:r}=t;"test"!==process.env.NODE_ENV&&process.exit(r);default:const a=U(h,p);await F(a,k.HTML)}}catch(e){console.log("Something went wrong while running the utility"),console.error(e),process.exit(1)}};Y();export{q as getReportType,Y as runScript};
