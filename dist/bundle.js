#! /usr/bin/env node
import e from"path";import{promises as n}from"fs";import t from"semver/functions/gte.js";import s from"axios";import r from"app-root-path";const a=(e={})=>Object.keys(e).map((n=>({package:n,version:e[n]}))),i=(e,n)=>`\n                    <h2>${n}</h2>\n                <table id="result-table-${n}">\n                    <thead>\n                        <tr>\n                        <td>Dependency Name</td>\n                        <td>Current Version</td>\n                        <td>Latest Version</td>\n                        <td>Status</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                       ${e.map((({package:e})=>{const{name:n,latest:s,current:r}=e,a=((e,n)=>t(n,e)?"UP TO DATE":"OUTDATED")(s.version,r.version);return`<tr>\n                        <td>${n}</td>\n                        <td> ${r.version} </td>\n                        <td>${s.version} </td>\n                        <td style=${"OUTDATED"===a?"background-color:red":"background-color:green"}>${a}</td></tr>`})).join("")}\n                    </tbody>\n                    </table>`,o=process.env.DEP_CHECK_WHITELIST||[],d=async(e,n)=>{try{const t=((e,n)=>n.filter((n=>!e.includes(n.package))))(n,e);return await Promise.all(t.map((async e=>{const n=await c({package:e.package});return await l(n,e)})))}catch(e){console.error(e),process.exit(1)}},c=async({package:e})=>{const{data:n}=await s.get(`https://registry.npmjs.org/${e}`),{time:t}=n;return{versionTimeline:t,tags:n["dist-tags"]}},p=({name:e,versionTimeline:n,latest:t,definedVersion:s})=>({package:{name:e,latest:{version:t||s,releaseDate:n[t]||n[s]},current:{version:s,releaseDate:n[s]}}}),l=async({versionTimeline:e,tags:n},s)=>new Promise(((r,a)=>{try{const a=(()=>{if(Number.isNaN(Number.parseFloat(s.version))){const e=s.version.split(""),[n,...t]=e;return t.join("")}return s.version})(),{latest:i}=n;let o={};o=t(a,i)?p({name:s.package,versionTimeline:e,definedVersion:a}):p({name:s.package,versionTimeline:e,latest:i,definedVersion:a}),r(o)}catch(e){console.warn(e),a(e)}}));global.__basedir=r.path;const m=await(async()=>{const t=e.join(__basedir,"package.json"),s=JSON.parse(await(async({path:e,encoding:t,...s})=>{try{return n.readFile(e)}catch(n){console.error(`Error reading file ${e}`),console.error(n),process.exit(1)}})({path:t}));return{repoInfo:{name:s.name||"",version:s.version||""},dependencies:a(s.dependencies)||[],peerDependencies:a(s.peerDependencies)||[],devDependencies:a(s.devDependencies)||[]}})(),{peerDependencies:v,dependencies:u,devDependencies:D,repoInfo:g}=m,y=await(async({peerDependencies:e=[],devDependencies:n=[],dependencies:t=[]})=>{const s=o.length>0?o.split(","):[];return{peerDependenciesResult:await d(e,s),devDependenciesResult:await d(n,s),dependenciesResult:await d(t,s)}})({peerDependencies:v,dependencies:u,devDependencies:D}),h=(({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t})=>`\n        <html>\n        <title> Dependency Check -- Report </title>\n        <body>\n        <h1> Results Below: </h1>\n        <div class="dep-table">\n                ${i(t,"Dependencies")}\n        </div>\n        <div class="dev-table">\n                ${i(n,"Dev Dependencies")}\n        </div>\n        <div class="peer-table">\n                ${i(e,"Peer Dependencies")}\n        </div>\n        </body>\n    `)(y);await(async t=>{try{const s=e.join(__basedir,"dependency-status-report.html");await n.writeFile(s,t),console.log(`Wrote report to ${s}`)}catch(e){console.error(e)}})(h);
