#! /usr/bin/env node
import e from"path";import{promises as n}from"fs";import t from"semver/functions/gte.js";import r from"axios";import a from"semver/functions/diff.js";import o from"app-root-path";const s="JSON",d="HTML",i=(e={})=>Object.keys(e).map((n=>({package:n,version:e[n]}))),c=[{key:["UP TO DATE","N/A"],color:"background-color:green",meaning:"Up to date, no action needed."},{key:["PATCH"],color:"background-color:yellowgreen",meaning:"Patch upgrade, no breaking changes"},{key:["PREPATCH","PREMINOR","MINOR"],color:"background-color:yellow",meaning:"Minor upgrade, possible breaking changes. \n Consult the change log"},{key:["PRERELEASE","MAJOR","PREMAJOR"],color:"background-color:red",meaning:"Major upgrade with breaking changes. \n Consult the change log"}],l=(e,n)=>{const r=e=>{return(n=e,c.find((({key:e})=>e.includes(n))))?.color;var n};let a=0;return{template:e.length?`\n                    <h2>${n}</h2>\n                <table id="result-table-${n} style="width:100%">\n                    <thead>\n                        <tr>\n                        <td>Package</td>\n                        <td>Current Version</td>\n                        <td>Current Release Date</td>\n                        <td>Latest Version</td>\n                        <td>Latest Version Release Date</td>\n                        <td>Status</td>\n                        <td> Upgrade Type </td>\n                        <td> Link to package in registry </td>\n                        <td> Link to package on NPM </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                       ${e.map((({package:e})=>{const{name:n,registry_url:o,npm_url:s,latest:d,current:i,upgradeType:c}=e,l=((e,n)=>"ERROR"===e||"ERROR"===n?"UNKNOWN":t(n,e)?"UP TO DATE":"OUTDATED")(d.version,i.version);"OUTDATED"===l&&a++;const p=new Date(i.releaseDate).toLocaleDateString(),u=new Date(d.releaseDate).toLocaleDateString();return`<tr>\n                        <td>${n}</td>\n                        <td> ${i.version} </td>\n                        <td>${p}</td>\n                        <td>${d.version} </td>\n                         <td>${u}</td>\n                        <td class="status" style=${r(c.toUpperCase())}>${l}</td>\n                        <td> ${c.toUpperCase()} </td>\n                        <td> <a href=${o} target="_blank"> ${o} </a> </td>\n                        <td> <a href=${s} target="_blank"> ${s} </a> </td>\n                        </tr>`})).join("")}\n                    </tbody>\n                    </table>`:"",outdated_counter:a}},p=({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:r},{name:a,version:o})=>{const{template:s,outdated_counter:d}=l(t,"Dependencies"),{template:i,outdated_counter:p}=l(n,"Dev Dependencies"),{template:u,outdated_counter:g}=l(e,"Peer Dependencies"),{errorTable:h}=((e=[])=>({errorTable:e.length?`\n                    <h2>Failed Lookups </h2>\n                    <h4>We couldn't locate the packages below in the public npm registry </h4>\n                <table id="result-table-error style="width:100%">\n                    <thead>\n                        <tr>\n                        <td>Package</td>\n                        <td>Current Version</td>\n                        <td>Status</td>\n                        <td>Response Code</td>\n                    </thead>\n                    <tbody>\n                       ${e.map((({package:e})=>`<tr>\n                           <td>${e.name}</td>\n                           <td>${e.version}</td>\n                           <td>UNKNOWN</td>\n                           <td>${e.stackTrace.toString()}</td>\n                           </tr>`)).join("")}\n                    </tbody>\n                    </table>`:""}))(r),k=`    \n                    <h4>Legend </h4>\n                <table id="legend">\n                    <thead>\n                        <tr>\n                        <td>Color</td>\n                        <td>Meaning</td>\n                        <td>Upgrade Type</td>\n                    </thead>\n                    <tbody>\n                       ${c.map((({color:e,meaning:n,key:t})=>`<tr>\n                           <td style="${e}"></td>\n                           <td>${n}</td>\n                           <td>${t.join(" ")}</td>\n                           </tr>`)).join("")}\n                    </tbody>\n                    </table>`;return`\n        <html>\n        <title> Dependency Check -- Report </title>\n        <head>\n        </head>\n        <style>\n        {\n        font-family: Arial, Helvetica, sans-serif;\n        border-collapse: collapse;\n        width: 100%;\n        }\n\n        div.wrapper{\n        display: flex;\n        flex-direction: column;\n        flex-wrap: wrap;\n        width:100%;\n        }\n\n        .header, .sub-header{\n          flex-direction: row;\n          width:90%;\n        }\n        \n        .legend-table {\n          flex-direction: row;\n          width: 50%;\n          margin-right: 3em;\n        }\n        \n        .dep-table, .dev-table, .peer-table, .error-table {\n             width: 80%;\n             flex-direction: row;\n             min-width: 60%;\n        }\n        .status {\n          min-width: 5em;\n        }\n\n         td, th {\n        border: 1px solid #ddd;\n        padding: 8px;\n        }\n        tr {\n            cursor: pointer;\n        }\n        tr:nth-child(even){background-color: #f2f2f2;}\n\n        tr:hover {background-color: #ddd;}\n\n        #th {\n        padding-top: 12px;\n        padding-bottom: 12px;\n        text-align: left;\n        background-color: #04AA6D;\n        color: white;\n        }\n        </style>\n    \n        <body>\n        <div class="wrapper">\n        <div class=header>\n        <h2>Dependency Check Results for ${a} v${o} </h2>\n        </div>\n        <div class="sub-header">\n          <h3>${(()=>{const e=p+g+d;return 0==e?`üéâ There are ${e} packages that need to be updated. Woohoo! `:1==e?`‚ö†Ô∏è There is ${e} package that needs to be updated - Not bad! `:e>1&&e<10?`‚ö†Ô∏è There are  ${e} packages that need to be updated`:e>=10?`‚Äã‚Äã‚ö†Ô∏è‚Äãüò±‚Äã Ouch... There are ${e} packages that need to be updated üôà Good Luck! `:void 0})()} </h3>\n        </div>\n        \n        <div class="legend-table"> \n          ${k}\n        </div>\n        <div class="dep-table">\n                ${s}\n        </div>\n        <div class="dev-table">\n                ${i}\n        </div>\n        <div class="peer-table">\n                ${u}\n        </div>\n        <div class="error-table">\n            ${h}\n        </div>\n        </div>\n        </body>\n        </html>\n    `},u=async(t,r)=>{try{const a=e.join(__basedir,`dependency-status-report.${r}`);await n.writeFile(a,t),console.log(`Wrote report to ${a}`)}catch(e){console.error(e)}},g=async()=>{const t=e.join(__basedir,"package.json"),r=JSON.parse(await(async({path:e,encoding:t,...r})=>{try{return n.readFile(e)}catch(n){console.error(`Error reading file ${e}`),console.error(n),process.exit(1)}})({path:t}));return{repoInfo:{name:r.name||"",version:r.version||""},dependencies:i(r.dependencies)||[],peerDependencies:i(r.peerDependencies)||[],devDependencies:i(r.devDependencies)||[]}},h=process.env.DEP_CHECK_WHITELIST||[],k=async(e,n)=>{try{const t=[],r=((e,n)=>n.filter((n=>!e.includes(n.package))))(n,e),a=await Promise.all(r.map((async e=>{const n=await m({package:e.package});return await b(n,e)})));return{successfulLookups:a.filter((e=>!e.package.error||(t.push(e),!1))),failedLookups:t}}catch(e){console.error(e),process.exit(1)}},m=async({package:e})=>{const n=`https://registry.npmjs.org/${e}`;try{const{data:e}=await r.get(n),{time:t}=e;return{versionTimeline:t,tags:e["dist-tags"]}}catch(t){return console.error(`There was an issue searching the registry for ${e}, skipping...`),{error:!0,name:e,url:n,stackTrace:t}}},v=({name:e,versionTimeline:n,latest:t,definedVersion:r,error:o=!1,currentPackage:s,stackTrace:d})=>o?{package:{error:o,name:s.package,version:s.version,stackTrace:d}}:{package:{name:e,registry_url:`https://registry.npmjs.org/${e}`,npm_url:`https://www.npmjs.com/package/${e}`,latest:{version:t||r,releaseDate:n[t]||n[r]},current:{version:r,releaseDate:n[r]},upgradeType:a(r,t||r)||"N/A",error:o}},b=async({versionTimeline:e,tags:n,error:r=!1,stackTrace:a},o)=>new Promise(((s,d)=>{try{if(r)return s(v({error:r,currentPackage:o,stackTrace:a}));const d=(()=>{if(Number.isNaN(Number.parseFloat(o.version))){const e=o.version.split(""),[n,...t]=e;return t.join("")}return o.version})(),{latest:i}=n;let c={};c=t(d,i)?v({name:o.package,versionTimeline:e,definedVersion:d}):v({name:o.package,versionTimeline:e,latest:i,definedVersion:d}),s(c)}catch(e){console.warn(e),d(e)}}));try{global.__basedir=o.path;const e=process.argv.slice(2)[0]||d,n=await g(),{peerDependencies:r,dependencies:a,devDependencies:i,repoInfo:c}=n,l=await(async({peerDependencies:e=[],devDependencies:n=[],dependencies:t=[]})=>{const r=[],a=h.length>0?h.split(","):[],{successfulLookups:o,failedLookups:s}=await k(e,a),{successfulLookups:d,failedLookups:i}=await k(n,a),{successfulLookups:c,failedLookups:l}=await k(t,a);return r.push(...l,...i,...s),{peerDependenciesResult:o,devDependenciesResult:d,dependenciesResult:c,failedLookupResult:r}})({peerDependencies:r,dependencies:a,devDependencies:i});if(e&&e!=d){const e=(({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:r,failedLookupResult:a},{name:o,version:s})=>{const d=[...e,...n,...r].reduce(((e,{package:n})=>{const{latest:r,current:a}=n,o=t(a.version,r.version)||"N/A";e[o]=e[o]+1||1}),{});return console.log(d),{repoInfo:{name:o,version:s},packages:{devDependencies:n,peerDependencies:e,dependencies:r,failedLookups:a},stats:{}}})(l,c);await u(e,s)}else{const e=p(l,c);await u(e,d)}}catch(e){console.log("Something went wrong while running the utility"),console.error(e),process.exit(1)}
