#!/usr/bin/env node
import e from"path";import{promises as n}from"fs";import t from"app-root-path";import r from"axios";import a from"semver/functions/gte.js";import s from"semver/functions/diff.js";import"cli-table";const o=(e={})=>Object.keys(e).map((n=>({package:n,version:e[n]}))),d=t.path,i=async()=>{const t=e.join(d,"package.json"),r=JSON.parse(await(async({path:e})=>{try{return n.readFile(e)}catch(n){console.error(`Error reading file ${e}`),console.error(n),process.exit(1)}})({path:t}));return{repoInfo:{name:r.name||"",version:r.version||""},dependencies:o(r.dependencies)||[],peerDependencies:o(r.peerDependencies)||[],devDependencies:o(r.devDependencies)||[]}},c=process.env.DEP_CHECK_WHITELIST||[],l=async(e,n)=>{try{const t=[],r=((e,n)=>n.filter((n=>!e.includes(n.package))))(n,e),a=await Promise.all(r.map((async e=>{const n=await p({package:e.package});return await g(n,e)})));return{successfulLookups:a.filter((e=>!e.package.error||(t.push(e),!1))),failedLookups:t}}catch(e){console.error(e),process.exit(1)}},p=async({package:e})=>{const n=`https://registry.npmjs.org/${e}`;try{const{data:e}=await r.get(n),{time:t}=e;return{versionTimeline:t,tags:e["dist-tags"]}}catch(t){return console.error(`There was an issue searching the registry for ${e}, skipping...`),{error:!0,name:e,url:n,stackTrace:t}}},u=({name:e,versionTimeline:n,latest:t,definedVersion:r,error:a=!1,currentPackage:o,stackTrace:d})=>a?{package:{error:a,name:o.package,version:o.version,stackTrace:d}}:{package:{name:e,registry_url:`https://registry.npmjs.org/${e}`,npm_url:`https://www.npmjs.com/package/${e}`,latest:{version:t||r,releaseDate:n[t]||n[r]},current:{version:r,releaseDate:n[r]},upgradeType:s(r,t||r)||"N/A",error:a}},g=async({versionTimeline:e,tags:n,error:t=!1,stackTrace:r},s)=>new Promise(((o,d)=>{try{if(t)return o(u({error:t,currentPackage:s,stackTrace:r}));const d=(e=>{if(Number.isNaN(Number.parseFloat(e.version))){const n=e.version.split(""),[,...t]=n;return t.join("")}return e.version})(s),{latest:i}=n;let c={};c=a(d,i)?u({name:s.package,versionTimeline:e,definedVersion:d}):u({name:s.package,versionTimeline:e,latest:i,definedVersion:d}),o(c)}catch(e){console.warn(e),d(e)}})),h={JSON:"JSON",HTML:"HTML",CI:"CI"},k=e.resolve(t.path),m=({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t})=>[...e,...n,...t].reduce(((e,{package:n})=>{const{upgradeType:t}=n;return e[t]?{...e,[t]:e[t]+1}:{...e,[t]:1}}),{}),v=async({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:r,disableTime:a=!1},{name:s,version:o})=>{try{const d=new Date,i={repoInfo:{name:s,version:o},packages:{devDependencies:n,peerDependencies:e,dependencies:t,failedLookups:r},stats:m({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t}),reportGeneratedAt:{date:!a&&d.toLocaleDateString(),time:!a&&d.toLocaleTimeString()}},c=await(e=>new Promise(((n,t)=>{try{(Object.keys(e.stats)||[]).includes("major")?(console.error("Out of date dependencies detected. Please upgrade or ignore out of date dependencies"),n(1)):(console.info("Dependencies are up to date."),n(0))}catch(e){console.log(e),t(1)}})))(i);return console.log(exitCodeLet,c,"exit code"),{exitCode:exitCodeLet}}catch(e){console.error(e)}},b=({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:r},{name:a,version:s})=>{const{template:o,outdated_counter:d}=R(t,"Dependencies"),{template:i,outdated_counter:c}=R(n,"Dev Dependencies"),{template:l,outdated_counter:p}=R(e,"Peer Dependencies"),{errorTable:u}=f(r),g=D(),h=w({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:r});return`\n        <html>\n        <title> Dependency Check -- Report </title>\n        <head>\n        </head>\n        <style>\n        {\n        font-family: Arial, Helvetica, sans-serif;\n        border-collapse: collapse;\n        width: 100%;\n        }\n\n        div.wrapper{\n        display: flex;\n        flex-direction: column;\n        flex-wrap: wrap;\n        width:100%;\n        }\n\n        .header, .sub-header{\n          flex-direction: row;\n          width:90%;\n        }\n        \n        .legend-table {\n          flex-direction: row;\n          width: 50%;\n          margin-right: 3em;\n        }\n        \n        .dep-table, .dev-table, .peer-table, .error-table {\n             width: 80%;\n             flex-direction: row;\n             min-width: 60%;\n        }\n        .status {\n          min-width: 5em;\n        }\n\n         td, th {\n        border: 1px solid #ddd;\n        padding: 8px;\n        }\n        tr {\n            cursor: pointer;\n        }\n        tr:nth-child(even){background-color: #f2f2f2;}\n\n        tr:hover {background-color: #ddd;}\n\n        #th {\n        padding-top: 12px;\n        padding-bottom: 12px;\n        text-align: left;\n        background-color: #04AA6D;\n        color: white;\n        }\n        </style>\n    \n        <body>\n        <div class="wrapper">\n        <div class=header>\n        <h2>Dependency Check Results for ${a} v${s} </h2>\n        </div>\n        <div class="sub-header">\n          <h3>${(()=>{const e=c+p+d;return 0==e?`üéâ There are ${e} packages that need to be updated. Woohoo! `:1==e?`‚ö†Ô∏è There is ${e} package that needs to be updated - Not bad! `:e>1&&e<10?`‚ö†Ô∏è There are  ${e} packages that need to be updated`:e>=10?`‚Äã‚Äã‚ö†Ô∏è‚Äãüò±‚Äã Ouch... There are ${e} packages that need to be updated üôà Good Luck! `:void 0})()} </h3>\n        </div>\n        \n        <div class="legend-table"> \n          ${g}\n        </div>\n        <div class="stats-table">\n          ${h}\n        </div>\n        <div class="dep-table">\n                ${o}\n        </div>\n        <div class="dev-table">\n                ${i}\n        </div>\n        <div class="peer-table">\n                ${l}\n        </div>\n        <div class="error-table">\n            ${u}\n        </div>\n        </div>\n        </body>\n        </html>\n    `},y=[{key:["UP TO DATE","N/A"],color:"background-color:green",meaning:"Up to date, no action needed."},{key:["PATCH"],color:"background-color:yellowgreen",meaning:"Patch upgrade, no breaking changes"},{key:["PREPATCH","PREMINOR","MINOR"],color:"background-color:yellow",meaning:"Minor upgrade, possible breaking changes. \n Consult the change log"},{key:["PRERELEASE","MAJOR","PREMAJOR"],color:"background-color:red",meaning:"Major upgrade with breaking changes. \n Consult the change log"}],f=(e=[])=>({errorTable:e.length?`\n                    <h2>Failed Lookups </h2>\n                    <h4>We couldn't locate the packages below in the public npm registry </h4>\n                <table id="result-table-error style="width:100%">\n                    <thead>\n                        <tr>\n                        <td>Package</td>\n                        <td>Current Version</td>\n                        <td>Status</td>\n                        <td>Response Code</td>\n                    </thead>\n                    <tbody>\n                       ${e.map((({package:e})=>`<tr>\n                           <td>${e.name}</td>\n                           <td>${e.version}</td>\n                           <td>UNKNOWN</td>\n                           <td>${e.stackTrace.toString()}</td>\n                           </tr>`)).join("")}\n                    </tbody>\n                    </table>`:""}),D=()=>`    \n                    <h4>Legend </h4>\n                <table id="legend">\n                    <thead>\n                        <tr>\n                        <td>Color</td>\n                        <td>Meaning</td>\n                        <td>Upgrade Type</td>\n                    </thead>\n                    <tbody>\n                       ${y.map((({color:e,meaning:n,key:t})=>`<tr>\n                           <td style="${e}"></td>\n                           <td>${n}</td>\n                           <td>${t.join(" ")}</td>\n                           </tr>`)).join("")}\n                    </tbody>\n                    </table>`,R=(e,n)=>{const t=e=>{return(n=e,y.find((({key:e})=>e.includes(n)))).color;var n};let r=0;return{template:e.length?`\n                    <h2>${n}</h2>\n                <table id="result-table-${n} style="width:100%">\n                    <thead>\n                        <tr>\n                        <td>Package</td>\n                        <td>Current Version</td>\n                        <td>Current Release Date</td>\n                        <td>Latest Version</td>\n                        <td>Latest Version Release Date</td>\n                        <td>Status</td>\n                        <td> Upgrade Type </td>\n                        <td> Link to package in registry </td>\n                        <td> Link to package on NPM </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                       ${e.map((({package:e})=>{const{name:n,registry_url:s,npm_url:o,latest:d,current:i,upgradeType:c}=e,l=((e,n)=>"ERROR"===e||"ERROR"===n?"UNKNOWN":a(n,e)?"UP TO DATE":"OUTDATED")(d.version,i.version);"OUTDATED"===l&&r++;const p=new Date(i.releaseDate).toLocaleDateString(),u=new Date(d.releaseDate).toLocaleDateString();return`<tr>\n                        <td>${n}</td>\n                        <td> ${i.version} </td>\n                        <td>${p}</td>\n                        <td>${d.version} </td>\n                         <td>${u}</td>\n                        <td class="status" style=${t(c.toUpperCase())}>${l}</td>\n                        <td> ${c.toUpperCase()} </td>\n                        <td> <a href=${s} target="_blank"> ${s} </a> </td>\n                        <td> <a href=${o} target="_blank"> ${o} </a> </td>\n                        </tr>`})).join("")}\n                    </tbody>\n                    </table>`:"",outdated_counter:r}},w=({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t})=>{const r=m({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t}),a=Object.keys(r).filter((e=>"N/A"!==e));return a.length?`    \n                    <h4>Stats </h4>\n                <table id="stats">\n                    <thead>\n                        <tr>\n                        <td>Upgrade Type</td>\n                        <td>Package Count</td>\n                    </thead>\n                    <tbody>\n                    ${a.map((e=>`\n                      <tr>\n                      <td>${e.toUpperCase()}</td>\n                      <td>${r[e]}</td>\n                      </tr>\n                      `)).join("")}\n                    </tbody>\n                    </table>`:""},T=async(t,r)=>{try{const a=e.join(k,`dependency-status-report.${r.toLowerCase()}`);await n.writeFile(a,t),console.log(`Wrote report to ${a}`)}catch(e){console.error(e)}},$=()=>{const e=L.find((e=>e.includes("--report-type=")));if(e){const n=e.split("=");return Object.keys(h).find((e=>e==n[1]))||h.HTML}return h.HTML},L=process.argv.slice(2),C=async e=>{const n=e||$();try{const e=await i(),{peerDependencies:t,dependencies:r,devDependencies:a,repoInfo:s}=e,o=await(async({peerDependencies:e=[],devDependencies:n=[],dependencies:t=[]})=>{const r=[],a=c.length>0?c.split(","):[],{successfulLookups:s,failedLookups:o}=await l(e,a),{successfulLookups:d,failedLookups:i}=await l(n,a),{successfulLookups:p,failedLookups:u}=await l(t,a);return r.push(...u,...i,...o),{peerDependenciesResult:s,devDependenciesResult:d,dependenciesResult:p,failedLookupResult:r}})({peerDependencies:t,dependencies:r,devDependencies:a});switch(console.log(n,"report type"),n){case h.HTML:const e=b(o,s);await T(e,h.HTML);break;case h.JSON:const n=(({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t,failedLookupResult:r,disableTime:a=!1},{name:s,version:o})=>{const d=new Date;return JSON.stringify({repoInfo:{name:s,version:o},packages:{devDependencies:n,peerDependencies:e,dependencies:t,failedLookups:r},stats:m({peerDependenciesResult:e,devDependenciesResult:n,dependenciesResult:t}),reportGeneratedAt:{date:!a&&d.toLocaleDateString(),time:!a&&d.toLocaleTimeString()}},null,2)})(o,s);await T(n,h.JSON);break;case h.CI:const t=v(o,s),{exitCode:r}=t;process.exit(r);default:const a=b(o,s);await T(a,h.HTML)}}catch(e){console.log("Something went wrong while running the utility"),console.error(e),process.exit(1)}};C();export{$ as getReportType,C as runScript};
